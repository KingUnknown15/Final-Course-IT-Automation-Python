#!/usr/bin/env python3

import json
import locale
import sys
import os
import reports
import emails

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_popular = {}
  max_year = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    item_sales = item["total_sales"]
    item_year = item["car"]["car_year"]
    print(item_sales)
    car_com = format_car(item["car"])
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if item_year not in max_year:
      max_year[item_year] = item_sales
    else:
      max_year[item_year] += item_sales
    # TODO: also handle most popular car_year
    max_popular[car_com] = item_sales

  sort_by_value = dict(sorted(max_popular.items(), key=lambda item: item[1],reverse=True))
  popular_car = list(sort_by_value.keys())[0]
  popular_sales = list(sort_by_value.values())[0]

  sort_by_year = dict(sorted(max_year.items(), key=lambda item: item[1],reverse=True))
  popular_year = list(sort_by_year.keys())[0]
  popular_year_sales = list(sort_by_year.values())[0]
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(popular_car, popular_sales),
    "The most popular year was {} with {} sales.".format(popular_year,popular_year_sales)
  ]
  print(max_year)
  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data(os.path.expanduser('~') + "/car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  filename = "/tmp/cars.pdf"
  title = "Sales summary for last month"
  additional_info = "<br/>".join(summary)
  table_data = cars_dict_to_table(data)
  reports.generate(filename,title,additional_info,table_data)
  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = "\n".join(summary)
  attachment_path = "/tmp/cars.pdf"
  content = emails.generate(sender,receiver,subject,body,attachment_path)
  emails.send(content)

if __name__ == "__main__":
  main(sys.argv)